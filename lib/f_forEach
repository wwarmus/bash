[[ ${_AF_F_FOREACH:-} -eq 1 ]] && return || readonly _AF_F_FOREACH=1

# usage:
#  1) example with variable 
#  declare -a ar=(a b c d e)
#  f_v_forEach '${ar[@]}' 'echo $_iterator' 
#  2) example with array
#  f_v_forEach '1 2' 'echo $_iterator $_iterator'
#

function f_v_forEach(){
  if [[ $# -ne 2 || -z "$1" || -z "$2" ]]; then
    echo "Invalid number of arguments, expected 2, got $#"
    exit 1;
  fi
  
  # assign $1 parameter into local array 
  array_=($(echo "$1"));
  arrayCount_=${#array_[@]};
  func_="$2";
  
  # check if function ($2 parameter) contains keyword '_iterator'
  _testIterator=$(echo $func_ | grep -q _iterator ; echo $?);
  if [[ _testIterator -eq 0 ]]; then
    for _iterator in "${array_[@]}"; do
      # execute function on each _iterator 
      # that's why keyword _iterator needs to be
      # defined in the function ($2 parameter)
      eval ${func_};
    done
  else
    echo "[Error] No _iterator defined in function";
  fi
}
